// -*- C++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 2003-2016 all rights reserved
//

// code guard
#if !defined(isce_image_Slice_icc)
#error This header file contains implementation details of class isce::image::Slice
#endif


// meta-methods
isce::image::Slice::
Slice(const tile_t & tile, const layout_t & layout) :
    _tile{tile},
    _begin{0,0,0},
    _end{tile.shape()},
    _layout{layout}
{}

isce::image::Slice::
Slice(const tile_t & tile,
      const index_t & begin, const index_t & end, const layout_t & layout):
    _tile{tile},
    _begin{begin},
    _end{end},
    _layout{layout}
{}


// interface
// accessors
isce::image::Slice::shape_t
isce::image::Slice::
shape() const {
    // return my shape
    return _tile.shape();
}

isce::image::Slice::layout_t
isce::image::Slice::
layout() const {
    // return my layout
    return _layout;
}


// indexed access
size_t
isce::image::Slice::
offset(index_t index) const {
    // delegate to the reference tile
    return _tile.offset(index);
}

isce::image::Slice:: index_t
isce::image::Slice::
index(size_t offset) const {
    // delegate to the reference tile
    return _tile.index(offset);
}


// indexed access
size_t
isce::image::Slice::
operator[](index_t index) const {
    // delegate
    return _tile.offset(index);
}

isce::image::Slice:: index_t
isce::image::Slice::
operator[](size_t offset) const {
    // delegate
    return _tile.index(offset);
}


// iteration support
isce::image::Slice::iterator_t
isce::image::Slice::
begin() const {
    // build a packing-order iterator pointing to the beginning of the slice
    return iterator_t(_begin, _end, _layout);
}

isce::image::Slice::iterator_t
isce::image::Slice::
end() const {
    // build an iterator pointing to the end of the slice
    return iterator_t(_end, _end, _layout);
}


// end of file
