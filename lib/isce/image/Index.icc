// -*- C++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 2003-2016 all rights reserved
//

// code guard
#if !defined(isce_image_Index_icc)
#error This header file contains implementation details of class isce::image::Index
#endif


// meta-methods
isce::image::Index::
Index(size_t line, size_t sample, size_t band) :
    _index{line, sample, band}
{}


// interface
size_t
isce::image::Index::
size() const {
    // easy enough
    return _dim;
}

bool
isce::image::Index::
operator==(const Index & other) const {
    // this and other are equal iff their _index values match component-by-component
    for (size_t idx=0; idx < _dim; ++idx) {
        // if they differ
        if (_index[idx] != other._index[idx]) {
            // no match
            return false;
        }
    }
    // otherwise, it good
    return true;
}


bool
isce::image::Index::
operator!=(const Index & other) const {
    // delegate to operator==
    return !(*this == other);
}


size_t &
isce::image::Index::
operator[] (size_t item) {
    // bounds check
    if (item >= _dim) {
        // open a channel
        pyre::journal::firewall_t firewall("isce.image.bounds");
        // complain
        firewall
            << pyre::journal::at(__HERE__)
            << "index error: out of range: " << item << " > " << _dim-1
            << pyre::journal::endl;

    }
    // return the address of the indicated item
    return _index[item];
}


size_t
isce::image::Index::
operator[] (size_t item) const {
    // bounds check
    if (item >= _dim) {
        // open a channel
        pyre::journal::firewall_t firewall("isce.image.bounds");
        // complain
        firewall
            << pyre::journal::at(__HERE__)
            << "index error: out of range: " << item << " > " << _dim-1
            << pyre::journal::endl;

    }
    // look up the item value and return it
    return _index[item];
}

// end of file
